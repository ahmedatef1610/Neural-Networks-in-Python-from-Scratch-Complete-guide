# -*- coding: utf-8 -*-
"""Libraries for Neural Networks - sklearn 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gl_g_4ezMnkCzwuB-Qw3wMEa6Vt5MQsn

# Libraries for Neural Networks - sklearn 2 (regression)

## Loading the data

https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html
"""

from sklearn.neural_network import MLPRegressor
from sklearn import datasets

boston = datasets.load_boston()

inputs = boston.data
inputs

boston.feature_names

outputs = boston.target
outputs

boston.target_names

inputs.shape

outputs.shape

"""## Train and test datasets"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(inputs, outputs, test_size = 0.2)

X_train.shape

y_train.shape

X_test.shape

y_test.shape

max(X_train[0])

from sklearn.preprocessing import MinMaxScaler
scaler1 = MinMaxScaler()
X_train = scaler1.fit_transform(X_train)
X_test = scaler1.transform(X_test)

max(X_train[0])

y_train = y_train.reshape(-1, 1)
y_test = y_test.reshape(-1, 1)

y_train.shape

scaler2 = MinMaxScaler()
y_train = scaler2.fit_transform(y_train)
y_test = scaler2.transform(y_test)

max(y_train[0])

"""## Neural network (training)"""

(13 + 1) / 2

network = MLPRegressor(max_iter=2000, verbose=True, hidden_layer_sizes=(7))
network.fit(X_train, y_train)

network.coefs_

network.intercepts_

network.n_layers_

network.n_outputs_

network.out_activation_

"""## Neural network (evaluation)"""

X_test.shape

predictions = network.predict(X_test)
predictions

y_test

from sklearn.metrics import mean_absolute_error, mean_squared_error
mean_absolute_error(y_test, predictions)

mean_squared_error(y_test, predictions)

import numpy as np
np.sqrt(mean_squared_error(y_test, predictions))

"""## Neural network (classification)"""

X_test[0], y_test[0]

X_test[0].shape

new = X_test[0].reshape(1, -1)
new.shape

network.predict(new)

scaler2.inverse_transform(network.predict(new).reshape(-1,1))

scaler2.inverse_transform(y_test[0].reshape(-1,1))