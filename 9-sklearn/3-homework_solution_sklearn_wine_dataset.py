# -*- coding: utf-8 -*-
"""Homework solution sklearn Wine dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iki8l_QYorMJBvZB6drBrB_pAKXTBZQw

# Homework solution - sklearn 1 (wine classification)

## Loading the data

http://archive.ics.uci.edu/ml/datasets/Wine/
"""

from sklearn.neural_network import MLPClassifier
from sklearn import datasets

wine = datasets.load_wine()

inputs = wine.data
inputs

wine.feature_names

outputs = wine.target
outputs

wine.target_names

inputs.shape

outputs.shape

"""## Train and test datasets"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(inputs, outputs, test_size = 0.2)

X_train.shape

y_train.shape

X_test.shape

y_test.shape

"""## Neural network (training)"""

(13 + 3) / 2

# 13 -> 8 -> 8 -> 3
network = MLPClassifier(max_iter=2000,
                        verbose=True,
                        activation = 'logistic',
                        solver = 'adam',
                        learning_rate = 'constant',
                        learning_rate_init = 0.001,
                        tol=0.00000100,
                        hidden_layer_sizes = (8, 8))
network.fit(X_train, y_train)

network.classes_

network.coefs_

network.intercepts_

network.n_layers_

network.n_outputs_

network.out_activation_

"""## Neural network (evaluation)"""

X_test.shape

predictions = network.predict(X_test)
predictions

y_test

from sklearn.metrics import accuracy_score, confusion_matrix
accuracy_score(y_test, predictions)

cm = confusion_matrix(y_test, predictions)
cm

!pip install yellowbrick --upgrade

from yellowbrick.classifier import ConfusionMatrix
confusion_matrix = ConfusionMatrix(network, classes = wine.target_names)
confusion_matrix.fit(X_train, y_train)
confusion_matrix.score(X_test, y_test)
confusion_matrix.show()

"""## Neural network (classification)"""

X_test[0], y_test[0]

X_test[0].shape

new = X_test[0].reshape(1, -1)
new.shape

new

network.predict(new)

wine.target_names[network.predict(new)]